package com.dambeetech.first.board.controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

import com.dambeetech.first.board.model.service.BoardService;
import com.dambeetech.first.board.model.vo.Board;
import com.dambeetech.first.common.CommonPage;
import com.dambeetech.first.user.controller.UserController;

@Controller
public class BoardController {

	
	private static final Logger logger = LoggerFactory.getLogger(UserController.class);

	@Autowired
	private BoardService boardService;
	
	//보드 상세보기
	@RequestMapping("boardView.do")
	public String boardDetail(HttpServletRequest request, Model model) {
		int boardno = Integer.parseInt(request.getParameter("boardno"));
		model.addAttribute("no",boardno);
		return "board/boardDetail";
	}
	@RequestMapping("boardDetail.do")
	@ResponseBody
	public Board boardDetailView(HttpServletRequest request, Model model, Board board) {
		int boardno = Integer.parseInt(request.getParameter("no"));
		logger.info("boardno"+"번 게시글");
		board = boardService.boardDetail(boardno);
		System.out.println(board);
		
	return board;
	}
	
	@RequestMapping("boardWrite.do")
		public String boardWrite() {
			
			return "board/boardWrite";
		}
		
		//게시판 리스트 //검색 + 페이징 
		@RequestMapping("boardList.do")
		public String boardView(@RequestParam(value = "page", required = false, defaultValue = "1")int currentPage, CommonPage cpage, Model model) {
		int listCount = 0;
		System.out.println(currentPage);
		listCount = boardService.boardListCount(cpage);
		cpage.pageUpdate(10, 5, listCount, currentPage);
		cpage.setStartList(cpage.getStartList()-1);
		cpage.setEndList(10);
		System.out.println(cpage);
		//마리아디비 바이바티스에서는 startList,endList 시작이 0부터시작한다. 디비실행시와 다름 -1 해줘야함 
		//마리아디비 limit 에서는 몇번째부터, 몇개까지 인지설정.
			ArrayList<Board> list = boardService.boardList(cpage);
			model.addAttribute("commonPage", cpage);
			model.addAttribute("list", list);
			return "board/boardView";
		}
		
		//게시글작성
		@RequestMapping("boardenroll.do")
		public String boardEnroll(Board board, MultipartHttpServletRequest mtfRequest,HttpServletRequest request) {
		        MultipartFile mf = mtfRequest.getFile("file");
		       /* String savePath = request.getSession().getServletContext().getRealPath("resources/boardfile");*/
		        String savePath = "C:\\down";
		        if (mf != null) {
		        	String originalFileName = null;
					String renameFileName = null;
					try {
						mf.transferTo(new File(savePath + "\\" + mf.getOriginalFilename()));
						originalFileName = mf.getOriginalFilename();  //오리지널 파일네임 생성
						if (originalFileName != null) {
							SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");
							renameFileName = sdf.format(new java.sql.Date(System.currentTimeMillis())) + "."
									+ originalFileName.substring(originalFileName.lastIndexOf(".") + 1);
							// 파일명을 바꾸려면 File 객체의 renameTo() 사용함
							File originFile = new File(savePath + "\\" + originalFileName);
							File renameFile = new File(savePath + "\\" + renameFileName);
							// 파일 이름바꾸기 실행함 >> 실패한 경우에는 직접 바꾸기함
							if (!originFile.renameTo(renameFile)) {
								// 파일 입출력 스트림 생성하고, 원본을 읽어서 바꿀이름 파일에 기록함
								int read = -1;
								byte[] buf = new byte[1024]; // 한 번에 읽어서 저장할 바이트 배열
								FileInputStream fin = new FileInputStream(originFile);
								FileOutputStream fout = new FileOutputStream(renameFile);
								while ((read = fin.read(buf, 0, buf.length)) != -1) {
									fout.write(buf, 0, read);
								}
								fin.close();
								fout.close();
								originFile.delete(); // 원본 파일 삭제함.
							}
						}
					} catch (IOException e) {
						e.printStackTrace();
					}
					board.setBOARDORIGINALFILE(originalFileName);
					board.setBOARDRENAMEFILE(renameFileName);
		        }
		        //결과값에따라 에러페이지 또는 성공페이지
		        String page;
		        int result = boardService.boardWrite(board);
		        if(result >= 1) {
		        	page = "redirect:boardList.do";
		        }else {
		        	page = "common/loginfail";  //임시
		        }
		        
			return page;
		}
		
		//파일다운로드 뷰리졸버
		@RequestMapping("boardfiledown.do")
		public ModelAndView fileDown(HttpServletRequest request, Board board, ModelAndView modelAndView) {
			/*String savePath = request.getSession().getServletContext().getRealPath("/resources/boardfile");*/
			String savePath = "C:\\down";
			
			System.out.println(board + "실행됨");
			File downFile = new File(savePath + "/" + board.getBOARDRENAMEFILE());
			System.out.println(downFile);
			modelAndView.addObject("fileDown", downFile);
			modelAndView.addObject("originalFileName", board.getBOARDORIGINALFILE());
			modelAndView.setViewName("downFile");
			return modelAndView;
		}
}
